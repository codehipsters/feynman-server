// Generated by CoffeeScript 1.8.0
var API, APIImpl;

window.API = API = (function() {
  API.PresentationState = {
    NOT_STARTED: 'not_started',
    ACTIVE: 'active',
    ENDED: 'ended'
  };

  API.prototype.PresentationState = API.PresentationState;

  function API(apiEndpoint) {
    console.log('new API ' + this.apiEndpoint);
    this._ = new APIImpl(this, apiEndpoint);
  }

  API.prototype.start = function() {
    console.log("API.start()");
    return this._.start();
  };

  API.prototype.setSlideId = function(id) {
    console.log("API.setSlideId(" + id + ")");
    return this._.setSlideId(id);
  };

  API.prototype.finish = function() {
    console.log("API.finish()");
    return this._.finish();
  };

  API.prototype.startPoll = function(id, poll) {
    console.log("API.startPoll(" + id + ", " + (JSON.stringify(poll, null, '  ')) + ")");
    return this._.startPoll(id, poll);
  };

  API.prototype.finishPoll = function() {
    console.log("API.finishPoll()");
    return this._.finishPoll();
  };

  return API;

})();

APIImpl = (function() {
  function APIImpl(intf, apiEndpoint) {
    this.intf = intf;
    this.clientData = utils.obtainClientData();
    this.sockjs = new SockJS(apiEndpoint);
    this.active = false;
    console.log("clientData: " + (JSON.stringify(this.clientData, null, '  ')));
    this.sockjs.onopen = (function(_this) {
      return function(evt) {
        return _this.on_open(evt);
      };
    })(this);
    this.sockjs.onmessage = (function(_this) {
      return function(evt) {
        return _this.on_message(evt);
      };
    })(this);
    this.sockjs.onclose = (function(_this) {
      return function(evt) {
        return _this.on_close(evt);
      };
    })(this);
  }

  APIImpl.prototype.send = function(type, data) {
    var e;
    if (data == null) {
      data = '';
    }
    if (!this.active) {
      return console.warn("API.send(" + type + "): connection is not established");
    }
    try {
      this.sockjs.send(JSON.stringify({
        type: type,
        data: data
      }));
    } catch (_error) {
      e = _error;
      console.error("cannot stringify message <" + type + ">: " + e);
    }
    return void 0;
  };

  APIImpl.prototype.callback = function() {};

  APIImpl.prototype.start = function() {
    return this.send('start');
  };

  APIImpl.prototype.finish = function() {
    return this.send('finish');
  };

  APIImpl.prototype.setSlideId = function(id) {
    return this.send('slide', id);
  };

  APIImpl.prototype.startPoll = function(id, poll) {
    poll.id = id;
    return this.send('poll_start', poll);
  };

  APIImpl.prototype.finishPoll = function() {
    return this.send('poll_finish');
  };

  APIImpl.prototype.on_open = function() {
    var clientId, presentationId, _ref;
    console.log('API [*] open, proto:', this.sockjs.protocol);
    this.active = true;
    _ref = this.clientData, clientId = _ref.clientId, presentationId = _ref.presentationId;
    return this.send('init', {
      clientId: clientId,
      presentationId: presentationId,
      isPresenter: true
    });
  };

  APIImpl.prototype.on_message = function(evt) {
    var data, e, type, _name, _ref;
    console.log('API [.] message:', evt.data);
    try {
      _ref = JSON.parse(evt.data), type = _ref.type, data = _ref.data;
    } catch (_error) {
      e = _error;
      console.error("API: failed to parse incoming message '" + evt.data + "'");
      return;
    }
    return typeof this[_name = 'on_' + type] === "function" ? this[_name](data) : void 0;
  };

  APIImpl.prototype.on_close = function(evt) {
    var reason;
    this.active = false;
    reason = evt && evt.reason;
    console.log('API [*] close, reason:', reason);
    return this.callback('onError', reason);
  };

  return APIImpl;

})();
