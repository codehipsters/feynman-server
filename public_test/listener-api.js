// Generated by CoffeeScript 1.8.0
var API, APIImpl,
  __slice = [].slice;

window.API = API = (function() {
  API.PresentationState = {
    NOT_STARTED: 'not_started',
    ACTIVE: 'active',
    ENDED: 'ended'
  };

  API.prototype.PresentationState = API.PresentationState;

  function API(apiEndpoint) {
    console.log('new API ' + this.apiEndpoint);
    this._ = new APIImpl(this, apiEndpoint);
    this.onInitialState = void 0;
    this.onPollStarted = void 0;
    this.onPollEnded = void 0;
    this.onStateChanged = void 0;
    this.onError = void 0;
  }

  API.prototype.voteUp = function() {
    console.log('API.voteUp()');
    return this._.voteUp();
  };

  API.prototype.voteDown = function() {
    console.log('API.voteDown()');
    return this._.voteDown();
  };

  API.prototype.answer = function(index) {
    console.log('API.answer: ' + index);
    return this._.answer(index);
  };

  API.prototype.sendFeedback = function(msg) {
    console.log("API.sendFeedback: '" + msg + "'");
    return this._.sendFeedback(msg);
  };

  return API;

})();

APIImpl = (function() {
  function APIImpl(intf, apiEndpoint) {
    this.intf = intf;
    this.clientData = utils.obtainClientData();
    this.sockjs = new SockJS(apiEndpoint);
    this.active = false;
    console.log("clientData: " + (JSON.stringify(this.clientData, null, '  ')));
    this.sockjs.onopen = (function(_this) {
      return function(evt) {
        return _this.on_open(evt);
      };
    })(this);
    this.sockjs.onmessage = (function(_this) {
      return function(evt) {
        return _this.on_message(evt);
      };
    })(this);
    this.sockjs.onclose = (function(_this) {
      return function(evt) {
        return _this.on_close(evt);
      };
    })(this);
  }

  APIImpl.prototype.send = function(type, data) {
    var e;
    if (data == null) {
      data = '';
    }
    if (!this.active) {
      return console.warn("API.send(" + type + "): connection is not established");
    }
    try {
      this.sockjs.send(JSON.stringify({
        type: type,
        data: data
      }));
    } catch (_error) {
      e = _error;
      console.error("cannot stringify message <" + type + ">: " + e);
    }
    return void 0;
  };

  APIImpl.prototype.voteUp = function() {
    return this.send('vote_up');
  };

  APIImpl.prototype.voteDown = function() {
    return this.send('vote_down');
  };

  APIImpl.prototype.answer = function(optionIndex) {
    if (!this.poll) {
      return console.warn("API.answer(): no active poll");
    }
    return this.send('poll_vote', optionIndex);
  };

  APIImpl.prototype.sendFeedback = function(msg) {
    return this.send('question', msg);
  };

  APIImpl.prototype.callback = function() {
    var args, name, _base;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    console.log.apply(console, ['API ~> ' + name].concat(__slice.call(args)));
    return typeof (_base = this.intf)[name] === "function" ? _base[name].apply(_base, args) : void 0;
  };

  APIImpl.prototype.on_open = function() {
    var clientId, presentationId, _ref;
    console.log('API [*] open, proto:', this.sockjs.protocol);
    this.active = true;
    _ref = this.clientData, clientId = _ref.clientId, presentationId = _ref.presentationId;
    return this.send('init', {
      clientId: clientId,
      presentationId: presentationId
    });
  };

  APIImpl.prototype.on_message = function(evt) {
    var data, e, type, _name, _ref;
    console.log('API [.] message:', evt.data);
    try {
      _ref = JSON.parse(evt.data), type = _ref.type, data = _ref.data;
    } catch (_error) {
      e = _error;
      console.error("API: failed to parse incoming message '" + evt.data + "'");
      return;
    }
    return typeof this[_name = 'on_' + type] === "function" ? this[_name](data) : void 0;
  };

  APIImpl.prototype.on_initial_state = function(initialState) {
    this.poll = initialState.poll;
    return this.callback('onInitialState', initialState);
  };

  APIImpl.prototype.on_presentation_state = function(state) {
    return this.callback('onStateChanged', state);
  };

  APIImpl.prototype.on_poll = function(poll) {
    this.poll = poll;
    if (poll) {
      return this.callback('onPollStarted', poll);
    } else {
      return this.callback('onPollEnded');
    }
  };

  APIImpl.prototype.on_close = function(evt) {
    var reason;
    this.active = false;
    reason = evt && evt.reason;
    console.log('API [*] close, reason:', reason);
    return this.callback('onError', reason);
  };

  return APIImpl;

})();
